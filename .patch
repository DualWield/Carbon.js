Index: src/Carbon.js
===================================================================
--- src/Carbon.js	(revision 0)
+++ src/Carbon.js	(working copy)
@@ -0,0 +1,743 @@
+/**
+ * @file Carbon.js
+ * @author xuli07@baidu.com
+ * @description Carbon.js is a library for manipulating date easily.You can use
+ * Carbon.now() or new Carbon(time) to generate a new Carbon instance.A Carbon
+ * instance has many methods for you to get/set time, do additions/subtractions
+ * compare each,see differences from each,etc..
+ *
+ * Carbon.js is inspired by Carbon PHP Extension
+ *
+ * If you have any questions, please contact me with email.
+ *
+ * */
+(function (window) {
+    var Carbon = function (time) {
+        /**
+         * The day constants
+         * */
+        this.SUNDAY = 0;
+        this.MONDAY = 1;
+        this.TUESDAY = 2;
+        this.WEDNESDAY = 3;
+        this.THURSDAY = 4;
+        this.FRIDAY = 5;
+        this.SATURDAY = 6;
+
+
+        this.weekStartsAt = this.MONDAY;
+
+        this.weekEndsAt = this.SUNDAY;
+        /**
+         * Default format to user for toString method when type juggling occurs
+         *
+         * */
+        this.DEFAULT_TO_STRING_FORMAT = 'Y-m-d H:i:s';
+        /**
+         * Days of weekend
+         *
+         * */
+        this.weekendDays = [this.SATURDAY, this.SUNDAY];
+
+        this.toStringFormat = this.DEFAULT_TO_STRING_FORMAT;
+
+        this.instance = null;
+
+        this._init(time);
+    };
+
+    Carbon.prototype = {
+
+        /**
+         * Crate a new Carbon instance
+         *
+         * @param {(string|number)} time if time is now ,return
+         * the instance of current time,or use new Date to construct
+         * the instance
+         * @private
+         * */
+        _init: function (time) {
+            if (time === 'now' || typeof time === 'undefined') {
+                this.instance = new Date();
+            } else {
+                this.instance = new Date(time);
+            }
+        },
+
+        /**
+         * Get a copy of the instance
+         *
+         * @return {Carbon}
+         */
+        copy: function () {
+            return new Carbon(+this.instance);
+        },
+
+        /**
+         * Resets the time to 00:00:00
+         *
+         * @return {Carbon} static
+         */
+        startOfDay: function () {
+            return this.hour(0).minute(0).second(0);
+        },
+
+        /**
+         * Resets the time to 23:59:59
+         *
+         * @return {Carbon} static
+         */
+        endOfDay: function () {
+            return this.hour(23).minute(59).second(59);
+        },
+
+        /**
+         * Resets the date to the first day of the month and the time to 00:00:00
+         *
+         * @return {Carbon} static
+         */
+        startOfMonth: function () {
+            return this.startOfDay().day(1);
+        },
+
+        /**
+         * Resets the date to end of the month and time to 23:59:59
+         *
+         * @return {Carbon} static
+         */
+        endOfMonth: function () {
+            return this.addMonth().startOfMonth().subDay().endOfDay();
+        },
+
+        /**
+         * Resets the date to the first day of the year and the time to 00:00:00
+         *
+         * @return {Carbon} static
+         */
+        startOfYear: function () {
+            return this.month(1).startOfMonth();
+        },
+
+        /**
+         * Resets the date to end of the year and time to 23:59:59
+         *
+         * @return {Carbon} static
+         */
+        endOfYear: function () {
+            return this.month(12).endOfMonth();
+        },
+
+        /**
+         * return the day of week
+         *
+         * @return {number}
+         * */
+        dayOfWeek: function () {
+            return this.instance.getDay();
+        },
+
+        /**
+         * Resets the date to the first day of week (defined in weekStartsAt) and the time to 00:00:00
+         *
+         * @return {Carbon} static
+         */
+        startOfWeek: function () {
+            var dayOfWeek = this.instance.getDay();
+            if (dayOfWeek !== this.weekStartsAt) {
+                this.subDay(dayOfWeek - this.weekStartsAt);
+            }
+            return this.startOfDay();
+        },
+
+        /**
+         * Resets the date to end of week (defined in weekEndsAt) and time to 23:59:59
+         *
+         * @return {Carbon} static
+         */
+        endOfWeek: function () {
+            var dayOfWeek = this.instance.getDay();
+            if (dayOfWeek !== this.weekEndsAt) {
+                this.addDay(7 - dayOfWeek);
+            }
+            return this.endOfDay();
+        },
+        month: function (number) {
+            if (typeof number === 'undefined') {
+                return this.instance.getMonth() + 1;
+            } else {
+                this.instance.setMonth(number - 1);
+                return this;
+            }
+        },
+        date: function (number) {
+            if (typeof number === 'undefined') {
+                return this.instance.getDate();
+            } else {
+                this.instance.setDate(number);
+                return this;
+            }
+        },
+        year: function (number) {
+            if (typeof number === 'undefined') {
+                return this.instance.getFullYear();
+            } else {
+                this.instance.setFullYear(number);
+                return this;
+            }
+        },
+
+        /**
+         *  Get or set the day from the instance
+         *
+         *  @param {number} number days
+         *  @return {(Carbon|number)}
+         * */
+        day: function (number) {
+            if (typeof number === 'undefined') {
+                return this.instance.getDate();
+            } else {
+                this.instance.setDate(number);
+                return this;
+            }
+        },
+
+        /**
+         *  Get / set the hour
+         *
+         *  @param {number} number hours
+         *  @return {(Carbon|number)}
+         * */
+        hour: function (number) {
+            if (typeof number === 'undefined') {
+                return this.instance.getHours();
+            } else {
+                this.instance.setHours(number);
+                return this;
+            }
+        },
+        minute: function (number) {
+            if (typeof number === 'undefined') {
+                return this.instance.getMinutes();
+            } else {
+                this.instance.setMinutes(number);
+                return this;
+            }
+        },
+        second: function (number) {
+            if (typeof number === 'undefined') {
+                return this.instance.getSeconds();
+            } else {
+                this.instance.setSeconds(number);
+                return this;
+            }
+        },
+
+        /**
+         * Returns date formatted according to given format.
+         * @param {string} pattern the format type
+         * @return {string}
+         */
+        format: function (pattern) {
+            var source = this.instance;
+
+            function replacer(patternPart, result) {
+                pattern = pattern.replace(patternPart, result);
+            }
+
+            /**
+             * Auto fill the number to specific length
+             * @param {number} source the number
+             * @param {number} length the length you want to fill
+             *
+             * @return {string}
+             * */
+            var pad = function (source, length) {
+                var pre = '';
+                var negative = (source < 0);
+                var string = String(Math.abs(source));
+
+                if (string.length < length) {
+                    pre = (new Array(length - string.length + 1)).join('0');
+                }
+
+                return (negative ? '-' : '') + pre + string;
+            };
+
+            var year = source.getFullYear();
+            var month = source.getMonth() + 1;
+            var date2 = source.getDate();
+            var hours = source.getHours();
+            var minutes = source.getMinutes();
+            var seconds = source.getSeconds();
+
+            replacer(/(yyyy|Y)/g, pad(year, 4));
+            replacer(/yy/g, pad(parseInt(year.toString().slice(2), 10), 2));
+            replacer(/MM/g, pad(month, 2));
+            replacer(/(M|m)/g, pad(month, 2));
+            replacer(/d/g, pad(date2, 2));
+
+            replacer(/H/g, pad(hours, 2));
+            replacer(/h/g, pad(hours % 12, 2));
+            replacer(/(m|i)/g, pad(minutes, 2));
+            replacer(/s/g, pad(seconds, 2));
+
+            return pattern;
+        },
+
+        addYear: function (value) {
+            value = value == null ? 1 : value;
+            return this.addYears(value);
+        },
+        addYears: function (value) {
+            this.year(this.year() + value);
+            return this;
+        },
+        subYear: function (value) {
+            value = value == null ? 1 : value;
+            return this.addYears(-1 * value);
+        },
+        subYears: function (value) {
+            return this.addYears(-1 * value);
+        },
+
+        /**
+         * Add a month to the instance
+         *
+         * @param {number} value months
+         *
+         * @return {Carbon} static
+         */
+        addMonth: function (value) {
+            value = value == null ? 1 : value;
+            return this.addMonths(value);
+        },
+
+        /**
+         * Add months to the instance. Positive value travels forward while
+         * negative value travels into the past.
+         *
+         * @param {number} value months
+         *
+         * @return {Carbon} static
+         */
+        addMonths: function (value) {
+            this.month(this.month() + value);
+            return this;
+        },
+
+        /**
+         * Remove a month from the instance
+         *
+         * @param {number} value months
+         *
+         * @return {Carbon} static
+         */
+        subMonth: function (value) {
+            value = value == null ? 1 : value;
+            return this.subMonths(value);
+        },
+
+        /**
+         * Remove months from the instance
+         *
+         * @param {number} value months
+         *
+         * @return {Carbon} static
+         */
+        subMonths: function (value) {
+            this.month(this.month() - value);
+            return this;
+        },
+
+        /**
+         * Add a day to the instance
+         *
+         * @param {number} value days
+         * @return {Carbon} static
+         */
+        addDay: function (value) {
+            value = value == null ? 1 : value;
+            return this.addDays(value);
+        },
+
+        /**
+         * Add days to the instance. Positive value travels forward while
+         * negative value travels into the past.
+         *
+         * @param {number} value days
+         *
+         * @return {Carbon} static
+         */
+        addDays: function (value) {
+            this.date(this.date() + value);
+            return this;
+        },
+
+        /**
+         * Remove a day from the instance
+         *
+         * @param {number} value days
+         *
+         * @return {Carbon} static
+         */
+        subDay: function (value) {
+            value = value == null ? 1 : value;
+            return this.subDays(value);
+        },
+
+        /**
+         * Remove days from the instance
+         *
+         * @param {number} value days
+         *
+         * @return {Carbon} static
+         */
+        subDays: function (value) {
+            return this.addDays(-1 * value);
+        },
+        addHour: function (value) {
+            value = value == null ? 1 : value;
+            return this.addHours(value);
+        },
+        addHours: function (value) {
+            return this.hour(this.hour() + value);
+        },
+        subHour: function (value) {
+            value = value == null ? 1 : value;
+            return this.subHours(value);
+        },
+        subHours: function (value) {
+            return this.addHour(-1 * value);
+        },
+        addMinute: function (value) {
+            value = value == null ? 1 : value;
+            return this.addMinutes(value);
+        },
+        addMinutes: function (value) {
+            return this.minute(this.minute() + value);
+        },
+        subMinute: function (value) {
+            value = value == null ? 1 : value;
+            return this.subMinutes(value);
+        },
+        subMinutes: function (value) {
+            return this.addMinutes(-1 * value);
+        },
+        addSecond: function (value) {
+            value = value == null ? 1 : value;
+            return this.addSeconds(value);
+        },
+        addSeconds: function (value) {
+            return this.second(this.second() + value);
+        },
+        subSecond: function (value) {
+            value = value == null ? 1 : value;
+            return this.subSeconds(value);
+        },
+        subSeconds: function (value) {
+            return this.addSecond(-1 * value);
+        },
+        toDateString: function () {
+            return this.format('Y-m-d');
+        },
+        toTimeString: function () {
+            return this.format('H:i:s');
+        },
+        toDateTimeString: function () {
+            return this.format('Y-m-d H:i:s');
+        },
+
+        eq: function (carbon) {
+            return +this.instance === +carbon.instance;
+        },
+        ne: function (carbon) {
+            return !this.eq(carbon);
+        },
+        gt: function (carbon) {
+            return +this.instance > +carbon.instance;
+        },
+        lt: function (carbon) {
+            return +this.instance < +carbon.instance;
+        },
+        gte: function (carbon) {
+            return +this.instance >= +carbon.instance;
+        },
+        lte: function (carbon) {
+            return +this.instance <= +carbon.instance;
+        },
+
+        /**
+         * Get the maximum instance between a given instance (default now) and the current instance.
+         *
+         * @param {Carbon} dt instance
+         * @return {Carbon} static
+         */
+        max: function (dt) {
+            dt = dt == null ? Carbon.now() : dt;
+            return this.gt(dt) ? this : dt;
+        },
+
+        /**
+         * Get the minimum instance between a given instance (default now) and the current instance.
+         *
+         * @param {Carbon} dt instance
+         *
+         * @return {Carbon} static
+         */
+        min: function (dt) {
+            dt = dt == null ? Carbon.now() : dt;
+            return this.lt(dt) ? this : dt;
+        },
+        between: function (dt1, dt2, equal) {
+            equal = (typeof equal === 'undefined') ? true : equal;
+            if (dt1.gt(dt2)) {
+                var temp = dt1;
+                dt1 = dt2;
+                dt2 = temp;
+            }
+
+            if (equal) {
+                return this.gte(dt1) && this.lte(dt2);
+            }
+            else {
+                return this.gt(dt1) && this.lt(dt2);
+            }
+
+        },
+
+        /**
+         * Determines if the instance is a weekend day
+         *
+         * @return {boolean}
+         */
+        isWeekend: function () {
+            return this.weekendDays.indexOf(this.instance.getDay()) >= 0;
+        },
+
+        /**
+         * Determines if the instance is yesterday
+         *
+         * @return {boolean}
+         */
+        isWeekday: function () {
+            return !this.isWeekend();
+        },
+
+        /**
+         * Determines if the instance is yesterday
+         *
+         * @return {boolean}
+         */
+        isYesterday: function () {
+            return this.toDateString() === Carbon.yesterday().toDateString();
+        },
+
+        /**
+         * Determines if the instance is today
+         *
+         * @return {boolean}
+         */
+        isToday: function () {
+            return this.toDateString() === Carbon.now().toDateString();
+        },
+
+        /**
+         * Determines if the instance is tomorrow
+         *
+         * @return {boolean}
+         */
+        isTomorrow: function () {
+            return this.toDateString() === Carbon.tomorrow().toDateString();
+        },
+
+        /**
+         * Determines if the instance is in the future, ie. greater (after) than now
+         *
+         * @return {boolean}
+         */
+        isFuture: function () {
+            return this.gt(Carbon.now());
+        },
+
+        /**
+         * Determines if the instance is in the past, ie. less (before) than now
+         *
+         * @return {boolean}
+         */
+        isPast: function () {
+            return this.lt(Carbon.now());
+        },
+
+        /**
+         * Determines if the instance is a leap year
+         *
+         * @return {boolean}
+         */
+        isLeapYear: function () {
+            var year = this.instance.getFullYear();
+            return !(year % 400) || ((year % 100) && !(year % 4));
+        },
+
+        /**
+         * Checks if the passed in date is the same day as the instance current day.
+         *
+         * @param  {Carbon}  dt Carbon instance
+         * @return {boolean}
+         */
+        isSameDay: function (dt) {
+            return this.toDateString() === dt.toDateString();
+        },
+
+        /**
+         * Get the difference in years
+         *
+         * @param {Carbon}  dt Carbon instance
+         * @param {boolean} abs Get the absolute of the difference
+         *
+         * @return {number}
+         */
+        diffInYears: function (dt, abs) {
+            dt = dt == null ? Carbon.now() : dt;
+            abs = abs == null ? true : abs;
+            var value = this.instance.getFullYear() - dt.instance.getFullYear();
+            return abs ? Math.abs(value) : value;
+        },
+
+        /**
+         * Get the difference in months
+         *
+         * @param {Carbon}  dt Carbon instance
+         * @param {boolean} abs Get the absolute of the difference
+         *
+         * @return {number}
+         */
+        diffInMonths: function (dt, abs) {
+            dt = dt == null ? Carbon.now() : dt;
+            abs = abs == null ? true : abs;
+            var value = this.diffInYears(dt, abs) * 12 + this.instance.getMonth() - dt.instance.getMonth();
+            return abs ? Math.abs(value) : value;
+        },
+
+        /**
+         * Get the difference in week
+         *
+         * @param {Carbon}  dt Carbon instance
+         * @param {boolean} abs Get the absolute of the difference
+         *
+         * @return {number}
+         */
+        diffInWeeks: function (dt, abs) {
+            dt = dt == null ? Carbon.now() : dt;
+            abs = abs == null ? true : abs;
+            var value = Math.floor(this.diffInDays(dt, abs) / 7);
+            return abs ? Math.abs(value) : value;
+        },
+
+        /**
+         * Get the difference in days
+         *
+         * @param {Carbon}  dt Carbon instance
+         * @param {boolean} abs Get the absolute of the difference
+         *
+         * @return {number}
+         */
+        diffInDays: function (dt, abs) {
+            dt = dt == null ? Carbon.now() : dt;
+            abs = abs == null ? true : abs;
+            var value = Math.floor(this.diffInHours(dt, abs) / 24);
+            return abs ? Math.abs(value) : value;
+        },
+
+        /**
+         * Get the difference in Hours
+         *
+         * @param {Carbon}  dt Carbon instance
+         * @param {boolean} abs Get the absolute of the difference
+         *
+         * @return {number}
+         */
+        diffInHours: function (dt, abs) {
+            dt = dt == null ? Carbon.now() : dt;
+            abs = abs == null ? true : abs;
+            var value = Math.floor(this.diffInMinutes(dt, abs) / 60);
+            return abs ? Math.abs(value) : value;
+        },
+
+        /**
+         * Get the difference in Minutes
+         *
+         * @param {Carbon}  dt Carbon instance
+         * @param {boolean} abs Get the absolute of the difference
+         *
+         * @return {number}
+         */
+        diffInMinutes: function (dt, abs) {
+            dt = dt == null ? Carbon.now() : dt;
+            abs = abs == null ? true : abs;
+            var value = Math.floor(this.diffInSeconds(dt, abs) / 60);
+            return abs ? Math.abs(value) : value;
+        },
+
+        /**
+         * Get the difference in Seconds
+         *
+         * @param {Carbon}  dt Carbon instance
+         * @param {boolean} abs Get the absolute of the difference
+         *
+         * @return {number}
+         */
+        diffInSeconds: function (dt, abs) {
+            dt = dt == null ? Carbon.now() : dt;
+            abs = abs == null ? true : abs;
+            var value = Math.floor((+this.instance - dt.instance) / 1000);
+            return abs ? Math.abs(value) : value;
+        },
+        toString: function () {
+            return this.format(this.toStringFormat);
+        }
+
+    };
+
+    /**
+     * Get a Carbon instance for the current date and time
+     *
+     * @return {Carbon}
+     */
+    Carbon.now = function () {
+        return new Carbon('now');
+    };
+
+    /**
+     * Create a Carbon instance for today
+     *
+     * @return {Carbon}
+     */
+    Carbon.today = function () {
+        return Carbon.now().startOfDay();
+    };
+
+    /**
+     * Create a Carbon instance for yesterday
+     *
+     * @return {Carbon}
+     */
+    Carbon.yesterday = function () {
+        return Carbon.today().subDay();
+    };
+
+    /**
+     * Create a Carbon instance for tomorrow
+     *
+     * @return {Carbon}
+     */
+    Carbon.tomorrow = function () {
+        return Carbon.today().addDay();
+    };
+
+
+    if (typeof module === 'object' && typeof module.exports === 'object') {
+        module.exports = Carbon;
+    } else {
+        window.Carbon = Carbon;
+    }
+})(window);
Index: src/Carbon.js
===================================================================
--- src/Carbon.js	(revision 0)
+++ src/Carbon.js	(working copy)
@@ -0,0 +1,743 @@
+/**
+ * @file Carbon.js
+ * @author xuli07@baidu.com
+ * @description Carbon.js is a library for manipulating date easily.You can use
+ * Carbon.now() or new Carbon(time) to generate a new Carbon instance.A Carbon
+ * instance has many methods for you to get/set time, do additions/subtractions
+ * compare each,see differences from each,etc..
+ *
+ * Carbon.js is inspired by Carbon PHP Extension
+ *
+ * If you have any questions, please contact me with email.
+ *
+ * */
+(function (window) {
+    var Carbon = function (time) {
+        /**
+         * The day constants
+         * */
+        this.SUNDAY = 0;
+        this.MONDAY = 1;
+        this.TUESDAY = 2;
+        this.WEDNESDAY = 3;
+        this.THURSDAY = 4;
+        this.FRIDAY = 5;
+        this.SATURDAY = 6;
+
+
+        this.weekStartsAt = this.MONDAY;
+
+        this.weekEndsAt = this.SUNDAY;
+        /**
+         * Default format to user for toString method when type juggling occurs
+         *
+         * */
+        this.DEFAULT_TO_STRING_FORMAT = 'Y-m-d H:i:s';
+        /**
+         * Days of weekend
+         *
+         * */
+        this.weekendDays = [this.SATURDAY, this.SUNDAY];
+
+        this.toStringFormat = this.DEFAULT_TO_STRING_FORMAT;
+
+        this.instance = null;
+
+        this._init(time);
+    };
+
+    Carbon.prototype = {
+
+        /**
+         * Crate a new Carbon instance
+         *
+         * @param {(string|number)} time if time is now ,return
+         * the instance of current time,or use new Date to construct
+         * the instance
+         * @private
+         * */
+        _init: function (time) {
+            if (time === 'now' || typeof time === 'undefined') {
+                this.instance = new Date();
+            } else {
+                this.instance = new Date(time);
+            }
+        },
+
+        /**
+         * Get a copy of the instance
+         *
+         * @return {Carbon}
+         */
+        copy: function () {
+            return new Carbon(+this.instance);
+        },
+
+        /**
+         * Resets the time to 00:00:00
+         *
+         * @return {Carbon} static
+         */
+        startOfDay: function () {
+            return this.hour(0).minute(0).second(0);
+        },
+
+        /**
+         * Resets the time to 23:59:59
+         *
+         * @return {Carbon} static
+         */
+        endOfDay: function () {
+            return this.hour(23).minute(59).second(59);
+        },
+
+        /**
+         * Resets the date to the first day of the month and the time to 00:00:00
+         *
+         * @return {Carbon} static
+         */
+        startOfMonth: function () {
+            return this.startOfDay().day(1);
+        },
+
+        /**
+         * Resets the date to end of the month and time to 23:59:59
+         *
+         * @return {Carbon} static
+         */
+        endOfMonth: function () {
+            return this.addMonth().startOfMonth().subDay().endOfDay();
+        },
+
+        /**
+         * Resets the date to the first day of the year and the time to 00:00:00
+         *
+         * @return {Carbon} static
+         */
+        startOfYear: function () {
+            return this.month(1).startOfMonth();
+        },
+
+        /**
+         * Resets the date to end of the year and time to 23:59:59
+         *
+         * @return {Carbon} static
+         */
+        endOfYear: function () {
+            return this.month(12).endOfMonth();
+        },
+
+        /**
+         * return the day of week
+         *
+         * @return {number}
+         * */
+        dayOfWeek: function () {
+            return this.instance.getDay();
+        },
+
+        /**
+         * Resets the date to the first day of week (defined in weekStartsAt) and the time to 00:00:00
+         *
+         * @return {Carbon} static
+         */
+        startOfWeek: function () {
+            var dayOfWeek = this.instance.getDay();
+            if (dayOfWeek !== this.weekStartsAt) {
+                this.subDay(dayOfWeek - this.weekStartsAt);
+            }
+            return this.startOfDay();
+        },
+
+        /**
+         * Resets the date to end of week (defined in weekEndsAt) and time to 23:59:59
+         *
+         * @return {Carbon} static
+         */
+        endOfWeek: function () {
+            var dayOfWeek = this.instance.getDay();
+            if (dayOfWeek !== this.weekEndsAt) {
+                this.addDay(7 - dayOfWeek);
+            }
+            return this.endOfDay();
+        },
+        month: function (number) {
+            if (typeof number === 'undefined') {
+                return this.instance.getMonth() + 1;
+            } else {
+                this.instance.setMonth(number - 1);
+                return this;
+            }
+        },
+        date: function (number) {
+            if (typeof number === 'undefined') {
+                return this.instance.getDate();
+            } else {
+                this.instance.setDate(number);
+                return this;
+            }
+        },
+        year: function (number) {
+            if (typeof number === 'undefined') {
+                return this.instance.getFullYear();
+            } else {
+                this.instance.setFullYear(number);
+                return this;
+            }
+        },
+
+        /**
+         *  Get or set the day from the instance
+         *
+         *  @param {number} number days
+         *  @return {(Carbon|number)}
+         * */
+        day: function (number) {
+            if (typeof number === 'undefined') {
+                return this.instance.getDate();
+            } else {
+                this.instance.setDate(number);
+                return this;
+            }
+        },
+
+        /**
+         *  Get / set the hour
+         *
+         *  @param {number} number hours
+         *  @return {(Carbon|number)}
+         * */
+        hour: function (number) {
+            if (typeof number === 'undefined') {
+                return this.instance.getHours();
+            } else {
+                this.instance.setHours(number);
+                return this;
+            }
+        },
+        minute: function (number) {
+            if (typeof number === 'undefined') {
+                return this.instance.getMinutes();
+            } else {
+                this.instance.setMinutes(number);
+                return this;
+            }
+        },
+        second: function (number) {
+            if (typeof number === 'undefined') {
+                return this.instance.getSeconds();
+            } else {
+                this.instance.setSeconds(number);
+                return this;
+            }
+        },
+
+        /**
+         * Returns date formatted according to given format.
+         * @param {string} pattern the format type
+         * @return {string}
+         */
+        format: function (pattern) {
+            var source = this.instance;
+
+            function replacer(patternPart, result) {
+                pattern = pattern.replace(patternPart, result);
+            }
+
+            /**
+             * Auto fill the number to specific length
+             * @param {number} source the number
+             * @param {number} length the length you want to fill
+             *
+             * @return {string}
+             * */
+            var pad = function (source, length) {
+                var pre = '';
+                var negative = (source < 0);
+                var string = String(Math.abs(source));
+
+                if (string.length < length) {
+                    pre = (new Array(length - string.length + 1)).join('0');
+                }
+
+                return (negative ? '-' : '') + pre + string;
+            };
+
+            var year = source.getFullYear();
+            var month = source.getMonth() + 1;
+            var date2 = source.getDate();
+            var hours = source.getHours();
+            var minutes = source.getMinutes();
+            var seconds = source.getSeconds();
+
+            replacer(/(yyyy|Y)/g, pad(year, 4));
+            replacer(/yy/g, pad(parseInt(year.toString().slice(2), 10), 2));
+            replacer(/MM/g, pad(month, 2));
+            replacer(/(M|m)/g, pad(month, 2));
+            replacer(/d/g, pad(date2, 2));
+
+            replacer(/H/g, pad(hours, 2));
+            replacer(/h/g, pad(hours % 12, 2));
+            replacer(/(m|i)/g, pad(minutes, 2));
+            replacer(/s/g, pad(seconds, 2));
+
+            return pattern;
+        },
+
+        addYear: function (value) {
+            value = value == null ? 1 : value;
+            return this.addYears(value);
+        },
+        addYears: function (value) {
+            this.year(this.year() + value);
+            return this;
+        },
+        subYear: function (value) {
+            value = value == null ? 1 : value;
+            return this.addYears(-1 * value);
+        },
+        subYears: function (value) {
+            return this.addYears(-1 * value);
+        },
+
+        /**
+         * Add a month to the instance
+         *
+         * @param {number} value months
+         *
+         * @return {Carbon} static
+         */
+        addMonth: function (value) {
+            value = value == null ? 1 : value;
+            return this.addMonths(value);
+        },
+
+        /**
+         * Add months to the instance. Positive value travels forward while
+         * negative value travels into the past.
+         *
+         * @param {number} value months
+         *
+         * @return {Carbon} static
+         */
+        addMonths: function (value) {
+            this.month(this.month() + value);
+            return this;
+        },
+
+        /**
+         * Remove a month from the instance
+         *
+         * @param {number} value months
+         *
+         * @return {Carbon} static
+         */
+        subMonth: function (value) {
+            value = value == null ? 1 : value;
+            return this.subMonths(value);
+        },
+
+        /**
+         * Remove months from the instance
+         *
+         * @param {number} value months
+         *
+         * @return {Carbon} static
+         */
+        subMonths: function (value) {
+            this.month(this.month() - value);
+            return this;
+        },
+
+        /**
+         * Add a day to the instance
+         *
+         * @param {number} value days
+         * @return {Carbon} static
+         */
+        addDay: function (value) {
+            value = value == null ? 1 : value;
+            return this.addDays(value);
+        },
+
+        /**
+         * Add days to the instance. Positive value travels forward while
+         * negative value travels into the past.
+         *
+         * @param {number} value days
+         *
+         * @return {Carbon} static
+         */
+        addDays: function (value) {
+            this.date(this.date() + value);
+            return this;
+        },
+
+        /**
+         * Remove a day from the instance
+         *
+         * @param {number} value days
+         *
+         * @return {Carbon} static
+         */
+        subDay: function (value) {
+            value = value == null ? 1 : value;
+            return this.subDays(value);
+        },
+
+        /**
+         * Remove days from the instance
+         *
+         * @param {number} value days
+         *
+         * @return {Carbon} static
+         */
+        subDays: function (value) {
+            return this.addDays(-1 * value);
+        },
+        addHour: function (value) {
+            value = value == null ? 1 : value;
+            return this.addHours(value);
+        },
+        addHours: function (value) {
+            return this.hour(this.hour() + value);
+        },
+        subHour: function (value) {
+            value = value == null ? 1 : value;
+            return this.subHours(value);
+        },
+        subHours: function (value) {
+            return this.addHour(-1 * value);
+        },
+        addMinute: function (value) {
+            value = value == null ? 1 : value;
+            return this.addMinutes(value);
+        },
+        addMinutes: function (value) {
+            return this.minute(this.minute() + value);
+        },
+        subMinute: function (value) {
+            value = value == null ? 1 : value;
+            return this.subMinutes(value);
+        },
+        subMinutes: function (value) {
+            return this.addMinutes(-1 * value);
+        },
+        addSecond: function (value) {
+            value = value == null ? 1 : value;
+            return this.addSeconds(value);
+        },
+        addSeconds: function (value) {
+            return this.second(this.second() + value);
+        },
+        subSecond: function (value) {
+            value = value == null ? 1 : value;
+            return this.subSeconds(value);
+        },
+        subSeconds: function (value) {
+            return this.addSecond(-1 * value);
+        },
+        toDateString: function () {
+            return this.format('Y-m-d');
+        },
+        toTimeString: function () {
+            return this.format('H:i:s');
+        },
+        toDateTimeString: function () {
+            return this.format('Y-m-d H:i:s');
+        },
+
+        eq: function (carbon) {
+            return +this.instance === +carbon.instance;
+        },
+        ne: function (carbon) {
+            return !this.eq(carbon);
+        },
+        gt: function (carbon) {
+            return +this.instance > +carbon.instance;
+        },
+        lt: function (carbon) {
+            return +this.instance < +carbon.instance;
+        },
+        gte: function (carbon) {
+            return +this.instance >= +carbon.instance;
+        },
+        lte: function (carbon) {
+            return +this.instance <= +carbon.instance;
+        },
+
+        /**
+         * Get the maximum instance between a given instance (default now) and the current instance.
+         *
+         * @param {Carbon} dt instance
+         * @return {Carbon} static
+         */
+        max: function (dt) {
+            dt = dt == null ? Carbon.now() : dt;
+            return this.gt(dt) ? this : dt;
+        },
+
+        /**
+         * Get the minimum instance between a given instance (default now) and the current instance.
+         *
+         * @param {Carbon} dt instance
+         *
+         * @return {Carbon} static
+         */
+        min: function (dt) {
+            dt = dt == null ? Carbon.now() : dt;
+            return this.lt(dt) ? this : dt;
+        },
+        between: function (dt1, dt2, equal) {
+            equal = (typeof equal === 'undefined') ? true : equal;
+            if (dt1.gt(dt2)) {
+                var temp = dt1;
+                dt1 = dt2;
+                dt2 = temp;
+            }
+
+            if (equal) {
+                return this.gte(dt1) && this.lte(dt2);
+            }
+            else {
+                return this.gt(dt1) && this.lt(dt2);
+            }
+
+        },
+
+        /**
+         * Determines if the instance is a weekend day
+         *
+         * @return {boolean}
+         */
+        isWeekend: function () {
+            return this.weekendDays.indexOf(this.instance.getDay()) >= 0;
+        },
+
+        /**
+         * Determines if the instance is yesterday
+         *
+         * @return {boolean}
+         */
+        isWeekday: function () {
+            return !this.isWeekend();
+        },
+
+        /**
+         * Determines if the instance is yesterday
+         *
+         * @return {boolean}
+         */
+        isYesterday: function () {
+            return this.toDateString() === Carbon.yesterday().toDateString();
+        },
+
+        /**
+         * Determines if the instance is today
+         *
+         * @return {boolean}
+         */
+        isToday: function () {
+            return this.toDateString() === Carbon.now().toDateString();
+        },
+
+        /**
+         * Determines if the instance is tomorrow
+         *
+         * @return {boolean}
+         */
+        isTomorrow: function () {
+            return this.toDateString() === Carbon.tomorrow().toDateString();
+        },
+
+        /**
+         * Determines if the instance is in the future, ie. greater (after) than now
+         *
+         * @return {boolean}
+         */
+        isFuture: function () {
+            return this.gt(Carbon.now());
+        },
+
+        /**
+         * Determines if the instance is in the past, ie. less (before) than now
+         *
+         * @return {boolean}
+         */
+        isPast: function () {
+            return this.lt(Carbon.now());
+        },
+
+        /**
+         * Determines if the instance is a leap year
+         *
+         * @return {boolean}
+         */
+        isLeapYear: function () {
+            var year = this.instance.getFullYear();
+            return !(year % 400) || ((year % 100) && !(year % 4));
+        },
+
+        /**
+         * Checks if the passed in date is the same day as the instance current day.
+         *
+         * @param  {Carbon}  dt Carbon instance
+         * @return {boolean}
+         */
+        isSameDay: function (dt) {
+            return this.toDateString() === dt.toDateString();
+        },
+
+        /**
+         * Get the difference in years
+         *
+         * @param {Carbon}  dt Carbon instance
+         * @param {boolean} abs Get the absolute of the difference
+         *
+         * @return {number}
+         */
+        diffInYears: function (dt, abs) {
+            dt = dt == null ? Carbon.now() : dt;
+            abs = abs == null ? true : abs;
+            var value = this.instance.getFullYear() - dt.instance.getFullYear();
+            return abs ? Math.abs(value) : value;
+        },
+
+        /**
+         * Get the difference in months
+         *
+         * @param {Carbon}  dt Carbon instance
+         * @param {boolean} abs Get the absolute of the difference
+         *
+         * @return {number}
+         */
+        diffInMonths: function (dt, abs) {
+            dt = dt == null ? Carbon.now() : dt;
+            abs = abs == null ? true : abs;
+            var value = this.diffInYears(dt, abs) * 12 + this.instance.getMonth() - dt.instance.getMonth();
+            return abs ? Math.abs(value) : value;
+        },
+
+        /**
+         * Get the difference in week
+         *
+         * @param {Carbon}  dt Carbon instance
+         * @param {boolean} abs Get the absolute of the difference
+         *
+         * @return {number}
+         */
+        diffInWeeks: function (dt, abs) {
+            dt = dt == null ? Carbon.now() : dt;
+            abs = abs == null ? true : abs;
+            var value = Math.floor(this.diffInDays(dt, abs) / 7);
+            return abs ? Math.abs(value) : value;
+        },
+
+        /**
+         * Get the difference in days
+         *
+         * @param {Carbon}  dt Carbon instance
+         * @param {boolean} abs Get the absolute of the difference
+         *
+         * @return {number}
+         */
+        diffInDays: function (dt, abs) {
+            dt = dt == null ? Carbon.now() : dt;
+            abs = abs == null ? true : abs;
+            var value = Math.floor(this.diffInHours(dt, abs) / 24);
+            return abs ? Math.abs(value) : value;
+        },
+
+        /**
+         * Get the difference in Hours
+         *
+         * @param {Carbon}  dt Carbon instance
+         * @param {boolean} abs Get the absolute of the difference
+         *
+         * @return {number}
+         */
+        diffInHours: function (dt, abs) {
+            dt = dt == null ? Carbon.now() : dt;
+            abs = abs == null ? true : abs;
+            var value = Math.floor(this.diffInMinutes(dt, abs) / 60);
+            return abs ? Math.abs(value) : value;
+        },
+
+        /**
+         * Get the difference in Minutes
+         *
+         * @param {Carbon}  dt Carbon instance
+         * @param {boolean} abs Get the absolute of the difference
+         *
+         * @return {number}
+         */
+        diffInMinutes: function (dt, abs) {
+            dt = dt == null ? Carbon.now() : dt;
+            abs = abs == null ? true : abs;
+            var value = Math.floor(this.diffInSeconds(dt, abs) / 60);
+            return abs ? Math.abs(value) : value;
+        },
+
+        /**
+         * Get the difference in Seconds
+         *
+         * @param {Carbon}  dt Carbon instance
+         * @param {boolean} abs Get the absolute of the difference
+         *
+         * @return {number}
+         */
+        diffInSeconds: function (dt, abs) {
+            dt = dt == null ? Carbon.now() : dt;
+            abs = abs == null ? true : abs;
+            var value = Math.floor((+this.instance - dt.instance) / 1000);
+            return abs ? Math.abs(value) : value;
+        },
+        toString: function () {
+            return this.format(this.toStringFormat);
+        }
+
+    };
+
+    /**
+     * Get a Carbon instance for the current date and time
+     *
+     * @return {Carbon}
+     */
+    Carbon.now = function () {
+        return new Carbon('now');
+    };
+
+    /**
+     * Create a Carbon instance for today
+     *
+     * @return {Carbon}
+     */
+    Carbon.today = function () {
+        return Carbon.now().startOfDay();
+    };
+
+    /**
+     * Create a Carbon instance for yesterday
+     *
+     * @return {Carbon}
+     */
+    Carbon.yesterday = function () {
+        return Carbon.today().subDay();
+    };
+
+    /**
+     * Create a Carbon instance for tomorrow
+     *
+     * @return {Carbon}
+     */
+    Carbon.tomorrow = function () {
+        return Carbon.today().addDay();
+    };
+
+
+    if (typeof module === 'object' && typeof module.exports === 'object') {
+        module.exports = Carbon;
+    } else {
+        window.Carbon = Carbon;
+    }
+})(window);
Index: test/test.html
===================================================================
--- test/test.html	(revision 0)
+++ test/test.html	(working copy)
@@ -0,0 +1,15 @@
+<!DOCTYPE html>
+<html>
+<head>
+    <meta charset="utf-8">
+    <title>QUnit Carbon</title>
+    <link rel="stylesheet" href="//code.jquery.com/qunit/qunit-1.19.0.css">
+</head>
+<body>
+<div id="qunit"></div>
+<div id="qunit-fixture"></div>
+<script src="//code.jquery.com/qunit/qunit-1.19.0.js"></script>
+<script src="../src/Carbon.js"></script>
+<script src="test.js"></script>
+</body>
+</html>
\ No newline at end of file
Index: test/test.js
===================================================================
--- test/test.js	(revision 0)
+++ test/test.js	(working copy)
@@ -0,0 +1,168 @@
+/**
+ * @file test.js
+ * @author xuli07@baidu.com
+ *
+ * */
+/* global QUnit,Carbon */
+
+/**
+ * 主要测试 year()，month()，day()，hour()，minute(), second(), dayOfWeek()
+ * month可以接受大于12的参数，如果是13的话，就会设置成下一年的1月
+ * day,hour,minute,second同理
+ *
+ * */
+QUnit.test('Getters and Setters', function (assert) {
+    var d = new Carbon('2012-9-5 23:26:11');
+    assert.ok(d.year() === 2012);
+    d.year(2015);
+    assert.ok(d.year() === 2015);
+    assert.ok(d.month() === 9);
+    d.month(11);
+    assert.ok(d.month() === 11);
+    d.month(14);
+    assert.ok(d.month() === 2);
+    assert.ok(d.year() === 2016);
+
+    assert.ok(d.day() === 5);
+    d.day(23);
+    assert.ok(d.day() === 23);
+    d.day(50);
+    assert.ok(d.day() === 21);
+
+
+    assert.ok(d.hour() === 23);
+    d.hour(12);
+    assert.ok(d.hour() === 12);
+    d.hour(30);
+    assert.ok(d.hour() === 6);
+
+    assert.ok(d.minute() === 26);
+    d.minute(12);
+    assert.ok(d.minute() === 12);
+    d.minute(70);
+    assert.ok(d.minute() === 10);
+
+    assert.ok(d.second() === 11);
+    d.second(42);
+    assert.ok(d.second() === 42);
+    d.second(70);
+    assert.ok(d.second() === 10);
+
+    assert.ok(d.dayOfWeek() === 2);
+
+});
+
+/**
+ * 主要测试时间的一些加减处理
+ *
+ *
+* */
+QUnit.test('Additions And Subtractions', function (assert) {
+    var d = new Carbon('2012-01-31 00:00:00');
+    assert.ok(d.toDateTimeString() === '2012-01-31 00:00:00');
+    assert.ok(d.addYears(5).toDateTimeString() === '2017-01-31 00:00:00');
+    assert.ok(d.addYear().toDateTimeString() === '2018-01-31 00:00:00');
+    assert.ok(d.subYear().toDateTimeString() === '2017-01-31 00:00:00');
+    assert.ok(d.subYears(5).toDateTimeString() === '2012-01-31 00:00:00');
+
+    assert.ok(d.addMonths(60).toDateTimeString() === '2017-01-31 00:00:00');
+    assert.ok(d.addMonth().toDateTimeString() === '2017-03-03 00:00:00');
+    assert.ok(d.subMonth().toDateTimeString() === '2017-02-03 00:00:00');
+    assert.ok(d.subMonths(60).toDateTimeString() === '2012-02-03 00:00:00');
+
+    assert.ok(d.addDays(29).toDateTimeString() === '2012-03-03 00:00:00');
+    assert.ok(d.addDay().toDateTimeString() === '2012-03-04 00:00:00');
+    assert.ok(d.subDay().toDateTimeString() === '2012-03-03 00:00:00');
+    assert.ok(d.subDays(29).toDateTimeString() === '2012-02-03 00:00:00');
+
+    assert.ok(d.addHours(24).toDateTimeString() === '2012-02-04 00:00:00');
+    assert.ok(d.addHour().toDateTimeString() === '2012-02-04 01:00:00');
+    assert.ok(d.subHour().toDateTimeString() === '2012-02-04 00:00:00');
+    assert.ok(d.subHours(24).toDateTimeString() === '2012-02-03 00:00:00');
+
+    assert.ok(d.addMinutes(61).toDateTimeString() === '2012-02-03 01:01:00');
+    assert.ok(d.addMinute().toDateTimeString() === '2012-02-03 01:02:00');
+    assert.ok(d.subMinute().toDateTimeString() === '2012-02-03 01:01:00');
+    assert.ok(d.subMinutes(61).toDateTimeString() === '2012-02-03 00:00:00');
+
+    assert.ok(d.addSeconds(61).toDateTimeString() === '2012-02-03 00:01:01');
+    assert.ok(d.addSecond().toDateTimeString() === '2012-02-03 00:01:02');
+    assert.ok(d.subSecond().toDateTimeString() === '2012-02-03 00:01:01');
+    assert.ok(d.subSeconds(61).toDateTimeString() === '2012-02-03 00:00:00');
+
+
+});
+
+/**
+ * 主要测试设置相关的时间点，比如这个月开始的时间，今天开始的时间
+ *
+ * */
+QUnit.test('Modifiers', function (assert) {
+    var d = new Carbon('2015-09-16 12:00:00');
+    assert.ok(d.startOfDay().toDateTimeString() === '2015-09-16 00:00:00');
+    assert.ok(d.startOfDay().endOfDay().toDateTimeString() === '2015-09-16 23:59:59');
+    assert.ok(d.startOfMonth().toDateTimeString() === '2015-09-01 00:00:00');
+    assert.ok(d.startOfMonth().endOfMonth().toDateTimeString() === '2015-09-30 23:59:59');
+    assert.ok(d.startOfYear().toDateTimeString() === '2015-01-01 00:00:00');
+    assert.ok(d.startOfYear().endOfYear().toDateTimeString() === '2015-12-31 23:59:59');
+    d = new Carbon('2015-09-16 12:00:00');
+    assert.ok(d.startOfWeek().toDateTimeString() === '2015-09-14 00:00:00');
+    assert.ok(d.endOfWeek().toDateTimeString() === '2015-09-20 23:59:59');
+});
+
+/**
+ * 主要测试跟其他Carbon对象相差的时间
+ *
+ * */
+QUnit.test('Differences', function (assert) {
+    var dt1 = new Carbon('2015-09-16 12:00:00');
+    var dt2 = dt1.copy().addDay(10);
+    assert.ok(dt1.diffInDays(dt2) === 10);
+    assert.ok(dt2.diffInDays(dt1) === 10);
+    assert.ok(dt1.diffInDays(dt2, false) === -10);
+    assert.ok(dt2.diffInDays(dt1, false) === 10);
+    assert.ok(dt1.diffInDays(dt1.copy().addDays(400)) === 400);
+
+    assert.ok(dt1.diffInMinutes(dt1.copy().addSeconds(59)) === 0);
+    assert.ok(dt1.diffInMinutes(dt1.copy().addSeconds(60)) === 1);
+    assert.ok(dt1.diffInMinutes(dt1.copy().addSeconds(119)) === 1);
+    assert.ok(dt1.diffInMinutes(dt1.copy().addSeconds(120)) === 2);
+
+});
+
+/**
+ * 主要测试跟其他Carbon对象之间的比较结果,判断是否是今天，工作日等等
+ *
+ * */
+QUnit.test('Comparison', function (assert) {
+    var dt1 = new Carbon('2015-04-04');
+    var dt2 = new Carbon('2015-04-04');
+    assert.ok(dt1.eq(dt2) === true);
+    assert.ok(dt1.ne(dt2) === false);
+    assert.ok(dt1.gt(dt2) === false);
+    assert.ok(dt1.gte(dt2) === true);
+    assert.ok(dt1.lt(dt2) === false);
+    assert.ok(dt1.lte(dt2) === true);
+    var dt3 = new Carbon('2015-04-01');
+    assert.ok(dt1.between(dt3, dt2, true) === true);
+    assert.ok(dt1.between(dt3, dt2, false) === false);
+
+    assert.ok(dt1.max(dt3).toDateTimeString() === dt1.toDateTimeString());
+    assert.ok(dt1.min(dt3).toDateTimeString() === dt3.toDateTimeString());
+    assert.ok(dt1.isWeekday() === false);
+    assert.ok(dt1.isWeekend() === true);
+    var dt4 = Carbon.today();
+    assert.ok(dt4.copy().subDay().isYesterday() === true);
+    assert.ok(dt4.copy().isYesterday() === false);
+
+    assert.ok(dt4.isToday() === true);
+    assert.ok(dt4.copy().addDay().isTomorrow() === true);
+
+    assert.ok(dt4.copy().addDays(2).isFuture() === true);
+    assert.ok(dt4.copy().subDays(2).isPast() === true);
+    var dt5 = new Carbon('2000-01-01');
+    assert.ok(dt5.isLeapYear() === true);
+    assert.ok(dt4.isLeapYear() === false);
+    assert.ok(dt1.isSameDay(dt2) === true);
+
+});
Index: test/test.html
===================================================================
--- test/test.html	(revision 0)
+++ test/test.html	(working copy)
@@ -0,0 +1,15 @@
+<!DOCTYPE html>
+<html>
+<head>
+    <meta charset="utf-8">
+    <title>QUnit Carbon</title>
+    <link rel="stylesheet" href="//code.jquery.com/qunit/qunit-1.19.0.css">
+</head>
+<body>
+<div id="qunit"></div>
+<div id="qunit-fixture"></div>
+<script src="//code.jquery.com/qunit/qunit-1.19.0.js"></script>
+<script src="../src/Carbon.js"></script>
+<script src="test.js"></script>
+</body>
+</html>
\ No newline at end of file
Index: test/test.js
===================================================================
--- test/test.js	(revision 0)
+++ test/test.js	(working copy)
@@ -0,0 +1,168 @@
+/**
+ * @file test.js
+ * @author xuli07@baidu.com
+ *
+ * */
+/* global QUnit,Carbon */
+
+/**
+ * 主要测试 year()，month()，day()，hour()，minute(), second(), dayOfWeek()
+ * month可以接受大于12的参数，如果是13的话，就会设置成下一年的1月
+ * day,hour,minute,second同理
+ *
+ * */
+QUnit.test('Getters and Setters', function (assert) {
+    var d = new Carbon('2012-9-5 23:26:11');
+    assert.ok(d.year() === 2012);
+    d.year(2015);
+    assert.ok(d.year() === 2015);
+    assert.ok(d.month() === 9);
+    d.month(11);
+    assert.ok(d.month() === 11);
+    d.month(14);
+    assert.ok(d.month() === 2);
+    assert.ok(d.year() === 2016);
+
+    assert.ok(d.day() === 5);
+    d.day(23);
+    assert.ok(d.day() === 23);
+    d.day(50);
+    assert.ok(d.day() === 21);
+
+
+    assert.ok(d.hour() === 23);
+    d.hour(12);
+    assert.ok(d.hour() === 12);
+    d.hour(30);
+    assert.ok(d.hour() === 6);
+
+    assert.ok(d.minute() === 26);
+    d.minute(12);
+    assert.ok(d.minute() === 12);
+    d.minute(70);
+    assert.ok(d.minute() === 10);
+
+    assert.ok(d.second() === 11);
+    d.second(42);
+    assert.ok(d.second() === 42);
+    d.second(70);
+    assert.ok(d.second() === 10);
+
+    assert.ok(d.dayOfWeek() === 2);
+
+});
+
+/**
+ * 主要测试时间的一些加减处理
+ *
+ *
+* */
+QUnit.test('Additions And Subtractions', function (assert) {
+    var d = new Carbon('2012-01-31 00:00:00');
+    assert.ok(d.toDateTimeString() === '2012-01-31 00:00:00');
+    assert.ok(d.addYears(5).toDateTimeString() === '2017-01-31 00:00:00');
+    assert.ok(d.addYear().toDateTimeString() === '2018-01-31 00:00:00');
+    assert.ok(d.subYear().toDateTimeString() === '2017-01-31 00:00:00');
+    assert.ok(d.subYears(5).toDateTimeString() === '2012-01-31 00:00:00');
+
+    assert.ok(d.addMonths(60).toDateTimeString() === '2017-01-31 00:00:00');
+    assert.ok(d.addMonth().toDateTimeString() === '2017-03-03 00:00:00');
+    assert.ok(d.subMonth().toDateTimeString() === '2017-02-03 00:00:00');
+    assert.ok(d.subMonths(60).toDateTimeString() === '2012-02-03 00:00:00');
+
+    assert.ok(d.addDays(29).toDateTimeString() === '2012-03-03 00:00:00');
+    assert.ok(d.addDay().toDateTimeString() === '2012-03-04 00:00:00');
+    assert.ok(d.subDay().toDateTimeString() === '2012-03-03 00:00:00');
+    assert.ok(d.subDays(29).toDateTimeString() === '2012-02-03 00:00:00');
+
+    assert.ok(d.addHours(24).toDateTimeString() === '2012-02-04 00:00:00');
+    assert.ok(d.addHour().toDateTimeString() === '2012-02-04 01:00:00');
+    assert.ok(d.subHour().toDateTimeString() === '2012-02-04 00:00:00');
+    assert.ok(d.subHours(24).toDateTimeString() === '2012-02-03 00:00:00');
+
+    assert.ok(d.addMinutes(61).toDateTimeString() === '2012-02-03 01:01:00');
+    assert.ok(d.addMinute().toDateTimeString() === '2012-02-03 01:02:00');
+    assert.ok(d.subMinute().toDateTimeString() === '2012-02-03 01:01:00');
+    assert.ok(d.subMinutes(61).toDateTimeString() === '2012-02-03 00:00:00');
+
+    assert.ok(d.addSeconds(61).toDateTimeString() === '2012-02-03 00:01:01');
+    assert.ok(d.addSecond().toDateTimeString() === '2012-02-03 00:01:02');
+    assert.ok(d.subSecond().toDateTimeString() === '2012-02-03 00:01:01');
+    assert.ok(d.subSeconds(61).toDateTimeString() === '2012-02-03 00:00:00');
+
+
+});
+
+/**
+ * 主要测试设置相关的时间点，比如这个月开始的时间，今天开始的时间
+ *
+ * */
+QUnit.test('Modifiers', function (assert) {
+    var d = new Carbon('2015-09-16 12:00:00');
+    assert.ok(d.startOfDay().toDateTimeString() === '2015-09-16 00:00:00');
+    assert.ok(d.startOfDay().endOfDay().toDateTimeString() === '2015-09-16 23:59:59');
+    assert.ok(d.startOfMonth().toDateTimeString() === '2015-09-01 00:00:00');
+    assert.ok(d.startOfMonth().endOfMonth().toDateTimeString() === '2015-09-30 23:59:59');
+    assert.ok(d.startOfYear().toDateTimeString() === '2015-01-01 00:00:00');
+    assert.ok(d.startOfYear().endOfYear().toDateTimeString() === '2015-12-31 23:59:59');
+    d = new Carbon('2015-09-16 12:00:00');
+    assert.ok(d.startOfWeek().toDateTimeString() === '2015-09-14 00:00:00');
+    assert.ok(d.endOfWeek().toDateTimeString() === '2015-09-20 23:59:59');
+});
+
+/**
+ * 主要测试跟其他Carbon对象相差的时间
+ *
+ * */
+QUnit.test('Differences', function (assert) {
+    var dt1 = new Carbon('2015-09-16 12:00:00');
+    var dt2 = dt1.copy().addDay(10);
+    assert.ok(dt1.diffInDays(dt2) === 10);
+    assert.ok(dt2.diffInDays(dt1) === 10);
+    assert.ok(dt1.diffInDays(dt2, false) === -10);
+    assert.ok(dt2.diffInDays(dt1, false) === 10);
+    assert.ok(dt1.diffInDays(dt1.copy().addDays(400)) === 400);
+
+    assert.ok(dt1.diffInMinutes(dt1.copy().addSeconds(59)) === 0);
+    assert.ok(dt1.diffInMinutes(dt1.copy().addSeconds(60)) === 1);
+    assert.ok(dt1.diffInMinutes(dt1.copy().addSeconds(119)) === 1);
+    assert.ok(dt1.diffInMinutes(dt1.copy().addSeconds(120)) === 2);
+
+});
+
+/**
+ * 主要测试跟其他Carbon对象之间的比较结果,判断是否是今天，工作日等等
+ *
+ * */
+QUnit.test('Comparison', function (assert) {
+    var dt1 = new Carbon('2015-04-04');
+    var dt2 = new Carbon('2015-04-04');
+    assert.ok(dt1.eq(dt2) === true);
+    assert.ok(dt1.ne(dt2) === false);
+    assert.ok(dt1.gt(dt2) === false);
+    assert.ok(dt1.gte(dt2) === true);
+    assert.ok(dt1.lt(dt2) === false);
+    assert.ok(dt1.lte(dt2) === true);
+    var dt3 = new Carbon('2015-04-01');
+    assert.ok(dt1.between(dt3, dt2, true) === true);
+    assert.ok(dt1.between(dt3, dt2, false) === false);
+
+    assert.ok(dt1.max(dt3).toDateTimeString() === dt1.toDateTimeString());
+    assert.ok(dt1.min(dt3).toDateTimeString() === dt3.toDateTimeString());
+    assert.ok(dt1.isWeekday() === false);
+    assert.ok(dt1.isWeekend() === true);
+    var dt4 = Carbon.today();
+    assert.ok(dt4.copy().subDay().isYesterday() === true);
+    assert.ok(dt4.copy().isYesterday() === false);
+
+    assert.ok(dt4.isToday() === true);
+    assert.ok(dt4.copy().addDay().isTomorrow() === true);
+
+    assert.ok(dt4.copy().addDays(2).isFuture() === true);
+    assert.ok(dt4.copy().subDays(2).isPast() === true);
+    var dt5 = new Carbon('2000-01-01');
+    assert.ok(dt5.isLeapYear() === true);
+    assert.ok(dt4.isLeapYear() === false);
+    assert.ok(dt1.isSameDay(dt2) === true);
+
+});
